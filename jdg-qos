#!/bin/sh -eu

# NOTES:
# * tc earlier than version 110629 miscomputes ewma for choke
#	- workaround is to pass min as 'min/avpkt'
# * tc filter for ipv6 priority does not work
#	- workaround is to use u32 instead

# uncomment to enable debugging
#set -x

chkerr () {
	[ $? -ne 0 ] && echo error, please enable debugging and report >&2
}
trap chkerr 0

########## User Configurable Section ##########

# bottleneck assumed to be the uplink
V4INT=$(ip -4 route show default | sed 's/^.* dev \([^ ]\+\).*$/\1/')
V6INT=$(ip -6 route show default | sed 's/^.* dev \([^ ]\+\).*$/\1/')

# bottleneck rate in kbps (0 for auto)
DRATE=0
URATE=0

# latency in ms to next hop on an idle link
# ('ping' time to your ISP), to work this out
#  - do a traceroute to 8.8.8.8
#  - read off the first IP after your router
#  - from your router ping that IP on an idle link
#  - use the ping time (in ms) for LAT
LAT=10

# EF rate in kbps
DEF=64
UEF=64

# ATM encapsulation - set to non-zero to enable
# http://www.linuxhowtos.org/manpages/8/tc-stab.htm
OVERHEAD=32

###############################################

if [ $# -eq 0 ]; then
	cat <<EOF >&2
Usage: $(basename $0) { start | stop | status }
EOF
	exit 0
fi

if [ -z "$V4INT" -a -z "$V6INT" ]; then
	echo must have at least an v4 or v6 interface defined >&2
	exit 0
fi
# preference for v4 as v6 might be a tunnel
[ "$V4INT" ] && IFACE=$V4INT || IFACE=$V6INT

if [ "$1" = "status" ]; then
	tc -d -s qdisc show dev $IFACE
	tc -d -s class show dev $IFACE
	tc -d -s qdisc show dev ifb0
	tc -d -s class show dev ifb0
	exit 0
fi

if [ $DRATE -eq 0 ]; then
	if [ -f /proc/avalanche/avsar_modem_stats ]; then
		DRATE=$(awk '/Connection Rate/ { print $8 }' /proc/avalanche/avsar_modem_stats)
	else
		echo unable to automatically determine download rate >&2
		exit 1
	fi
fi
if [ $URATE -eq 0 ]; then
	if [ -f /proc/avalanche/avsar_modem_stats ]; then
		URATE=$(awk '/Connection Rate/ { print $4 }' /proc/avalanche/avsar_modem_stats)
	else
		echo unable to automatically determine upload rate >&2
		exit 1
	fi
fi

MTU=$(ip link show dev $IFACE | head -n1 | sed 's/^.* mtu \([^ ]\+\) .\+$/\1/')

TCVER=$(tc -Version | sed 's/^.*-ss\(.*\)$/\1/')
#[ $(tc qdisc add choke 2> /dev/null; echo $?) -eq 1 ] && SCHED=choke || SCHED=red
# FIXME we only support RED for now
SCHED=red

_ipt () {
	local PARAMS LENGTH MIN MAX

	# length seems to behave as if it is measuring the layer2 payload size
	LENGTH=$(echo $@ | sed -n '/ --length / s/^.* --length \([^:]\+\):\([^ ]\+\) .*$/\1 \2/ p')
	if [ -n "$LENGTH" ]; then
		MIN=$(echo $LENGTH | cut -d' ' -f1)
		MAX=$(echo $LENGTH | cut -d' ' -f2)
	fi

	if [ "$V4INT" ]; then
		PARAMS=$@

		if [ -n "$LENGTH" ]; then
			PARAMS=$(echo $PARAMS | sed "s/ --length \([^:]\+\):\([^ ]\+\) / --length $(($MIN + 20)):$(($MAX + 20)) /")
		fi

		iptables  -t mangle $PARAMS
	fi
	if [ "$V6INT" ]; then
		PARAMS=$@

		PARAMS=$(echo $PARAMS | sed 's/icmp/icmpv6/g')
		
		if [ -n "$LENGTH" ]; then
			PARAMS=$(echo $PARAMS | sed "s/ --length \([^:]\+\):\([^ ]\+\) / --length $(($MIN + 40)):$(($MAX + 40)) /")
		fi

		ip6tables -t mangle $PARAMS
	fi
}

ipt () {
	_ipt -A jdg-qos $@
}

ipt_stop () {
	sysctl -w net.netfilter.nf_conntrack_acct=0 > /dev/null

	_ipt -D PREROUTING -j jdg-qos 2> /dev/null || true
	_ipt -F jdg-qos               2> /dev/null || true
	_ipt -X jdg-qos               2> /dev/null || true
}

ipt_init () {
	_ipt -N jdg-qos
}

ipt_start () {
	sysctl -w net.netfilter.nf_conntrack_acct=1 > /dev/null

	_ipt -A PREROUTING -j jdg-qos
}

# when editing these rules, all DSCP actions are fallthrough (like LOG)
# so the final DSCP marking is what you get having evaluated all the rules
#
# priority summary (packets are dequeued EF->AF->BE only when prior queue is empty):
#  * EF - leased line like (UEF/DEF speed)
#  * AF - http://en.wikipedia.org/wiki/Differentiated_services#Assured_Forwarding_.28AF.29_PHB_group
#	- in decending order of priority: AF[4->1]1 -> AF[4->1]2 -> AF[4->1]3
#  * BE - everything else
#
ipt_rules () {
	# start with some sensible defaults
	ipt -m dscp --dscp-class CS0       -j DSCP --set-dscp-class BE
	ipt -m dscp --dscp-class CS1       -j DSCP --set-dscp-class AF12
	ipt -m dscp --dscp-class CS2       -j DSCP --set-dscp-class AF22
	ipt -m dscp --dscp-class CS3       -j DSCP --set-dscp-class AF32
	ipt -m dscp --dscp-class CS4       -j DSCP --set-dscp-class AF42
	ipt -m dscp --dscp-class CS5       -j DSCP --set-dscp-class EF
	ipt -m dscp --dscp-class CS6       -j DSCP --set-dscp-class AF41
	ipt -m dscp --dscp-class CS7       -j DSCP --set-dscp-class AF41
	ipt -m tos  --tos        0x00      -j DSCP --set-dscp-class BE
	ipt -m tos  --tos        0x02      -j DSCP --set-dscp-class AF13
	ipt -m tos  --tos        0x04      -j DSCP --set-dscp-class BE
	ipt -m tos  --tos        0x06      -j DSCP --set-dscp-class BE
	ipt -m tos  --tos        0x08/0x08 -j DSCP --set-dscp-class AF12
	ipt -m tos  --tos        0x10/0x10 -j DSCP --set-dscp-class AF32
	ipt -m tos  --tos        0x18/0x18 -j DSCP --set-dscp-class AF22

	# DNS
	ipt -p udp -m multiport --ports domain -j DSCP --set-dscp-class AF31
	ipt -p tcp -m multiport --ports domain -j DSCP --set-dscp-class AF31

	# HTTP(S)
	ipt -p tcp -m multiport --ports www,https \
		-j DSCP --set-dscp-class AF12
	ipt -p tcp -m multiport --ports www,https \
		-m connbytes --connbytes 0:$((512*1024)) \
			--connbytes-dir both --connbytes-mode bytes \
		-j DSCP --set-dscp-class AF22

	# SSH and Telnet
	ipt -p tcp -m multiport --ports ssh,telnet \
		-j DSCP --set-dscp-class AF32
	ipt -p tcp -m multiport --ports ssh \
		-m tos --tos Maximize-Throughput \
		-j DSCP --set-dscp-class AF22

	# ICMP
	ipt -p icmp                          -j DSCP --set-dscp-class AF41
	ipt -p icmp --icmp-type echo-request -j DSCP --set-dscp-class AF42
	ipt -p icmp --icmp-type echo-reply   -j DSCP --set-dscp-class AF42

	# TCP
	ipt -p tcp ! --tcp-flags SYN,FIN,RST     NONE \
		-j DSCP --set-dscp-class AF41
	ipt -p tcp   --tcp-flags SYN,ACK,FIN,RST ACK \
		-m length --length 32:40 \
		-j DSCP --set-dscp-class AF42
}

qos_stop () {
	tc qdisc del dev $IFACE	root	2> /dev/null || true
	tc qdisc del dev $IFACE	ingress	2> /dev/null || true

	tc qdisc del dev ifb0	root	2> /dev/null || true
	ip link set ifb0 down		2> /dev/null || true

	modprobe -r ifb			2> /dev/null || true
}

qos_rules () {
	local STAB

	[ $OVERHEAD -ne 0 ] && STAB="stab linklayer atm overhead $OVERHEAD mtu $MTU" || STAB=""

	modprobe ifb numifbs=1
	ip link set ifb0 up
	tc qdisc add dev $IFACE ingress handle ffff:
	tc filter add dev $IFACE parent ffff: protocol all prio 1 \
		basic action mirred egress redirect dev ifb0

	for INT in $IFACE ifb0
	do
		[ $INT = "ifb0" ] && BW=$DRATE || BW=$URATE

		tc qdisc add dev $INT $STAB root        handle   1: tbf \
			rate $(($BW/100*95))kbit burst $(($MTU*16)) latency ${LAT}ms
		tc qdisc add dev $INT       parent  1:  handle  10: prio \
			bands 3 priomap 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
		tc qdisc add dev $INT       parent 10:1 handle 100: tbf \
			rate ${UEF}kbit burst $(($MTU*16)) latency $(($LAT+50))ms
		tc qdisc add dev $INT       parent 10:2 handle 200: drr

		MAX=$((($BW*1000)/(8*2)))
		MIN=$(($MAX/3))
		LIMIT=$((8*$MAX))
		BURST=$(((2*$MIN+$MAX)/(3*1000)))
		[ $SCHED = "choke" -a $TCVER -le 110629 ] \
			&& MINVAR=$(($MIN/1000)) || MINVAR=$MIN
		tc qdisc add dev $INT       parent 10:3 handle 300: $SCHED \
			limit $LIMIT min $MINVAR max $MAX avpkt 1000 burst $BURST \
			bandwidth $BW probability 0.04 ecn

		tc filter add dev $INT parent 10: protocol ip   prio 1 \
			u32 match ip tos 0xb8 0xfc               classid 10:1
		tc filter add dev $INT parent 10: protocol ipv6 prio 2 \
			u32 match u32 0x0b800000 0x0fc00000 at 0 classid 10:1

		tc filter add dev $INT parent 10: protocol ip   prio 1 \
			u32 match ip tos 0x00 0xfc               classid 10:3
		tc filter add dev $INT parent 10: protocol ipv6 prio 2 \
			u32 match u32 0x00000000 0x0fc00000 at 0 classid 10:3

		# TODO to change to four PRIO with three RED in each off DRR
		for QUEUE in	$(seq 10 2 14) $(seq 18 2 22) \
				$(seq 26 2 30) $(seq 34 2 38); do
			tc class add dev $INT parent 200: classid 200:$QUEUE drr \
				quantum $MTU

			PROB=0.0$((($QUEUE % 8)/3 + ($QUEUE % 8)/3))
			[ $PROB = "0.00" ] && PROB=0.01
			AVPKT=$((500 * ($QUEUE % 8)/2))
			BURST=$(((2*$MIN+$MAX)/(3*AVPKT)))
			[ $SCHED = "choke" -a $TCVER -le 110629 ] \
				&& MINVAR=$(($MIN/$AVPKT)) || MINVAR=$MIN
			tc qdisc add dev $INT parent 200:$QUEUE $SCHED \
				limit $LIMIT min $MINVAR max $MAX \
				avpkt $AVPKT burst $BURST bandwidth $BW \
				probability $PROB ecn

			tc filter add dev $INT parent 200: protocol ip   prio 1 \
				u32 match ip tos $(printf 0x%x $(($QUEUE*4))) 0xfc \
				classid 200:$QUEUE
			tc filter add dev $INT parent 200: protocol ipv6 prio 2 \
				u32 match u32 \
					$(printf 0x0%x00000 $(($QUEUE*4))) \
					0x0fc00000 at 0 \
				classid 200:$QUEUE
		done
	done
}

qos_stop
ipt_stop
[ "x$1" = "xstop" ] && exit 0
ipt_init
ipt_rules
qos_rules
ipt_start

exit 0
