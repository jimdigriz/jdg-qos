#!/bin/sh -e

# uncomment to enable debugging
set -x

chkerr () {
	[ $? -ne 0 ] && echo error, please enable debugging and report
}
trap chkerr 0

########## User Configurable Section ##########

# bottleneck assumed to be the uplink
V4INT=$(ip -4 route show default | sed 's/^.* dev \([^ ]\+\) .\+$/\1/')
V6INT=$(ip -6 route show default | sed 's/^.* dev \([^ ]\+\) .\+$/\1/')

# bottleneck rate in kbps
DRATE=$(awk '/Connection Rate/ { print $8 }' /proc/avalanche/avsar_modem_stats)
URATE=$(awk '/Connection Rate/ { print $4 }' /proc/avalanche/avsar_modem_stats)

# base latency to next hop on an idle link
LAT=16

# EF rate in kbps
DEF=64
UEF=64

# ATM encapsulation - set to non-zero to enable
# http://www.linuxhowtos.org/manpages/8/tc-stab.htm
OVERHEAD=32

###############################################

# AF share latency avpkt prob
TABLE="\
AF11:10:150:0000:1.00 \
AF12:10:150:0000:0.02 \
AF13:10:150:0000:0.04 \
AF21:10:100:1000:1.00 \
AF22:10:100:1000:0.02 \
AF23:10:100:1000:0.04 \
AF31:10:060:0500:1.00 \
AF32:10:060:0500:0.02 \
AF33:10:060:0500:0.04 \
AF41:10:020:0100:1.00 \
AF42:10:020:0100:0.02 \
AF43:10:020:0100:0.04"

###############################################

if [ -z "$V4INT" -a -z "$V6INT" ]; then
	echo must have at least an v4 or v6 interface defined
	exit 1
fi
# preference for v4 as v6 might be a tunnel
[ "$V4INT" ] && IFACE=$V4INT || IFACE=$V6INT

if [ "x$1" == "xstatus" ]; then
	tc -s qdisc  show dev $IFACE
	tc -s class  show dev $IFACE
	tc -s qdisc  show dev ifb0
	tc -s class  show dev ifb0
	tc -s filter show dev $IFACE
	tc -s filter show dev $IFACE parent ffff:
	tc -s filter show dev ifb0
	exit 0
fi

MTU=$(ip link show dev $IFACE | head -n1 | sed 's/^.* mtu \([^ ]\+\) .\+$/\1/')

_ipt () {
	local PARAMS

	if [ "$V4INT" ]; then
		iptables  -t mangle $@
	fi
	if [ "$V6INT" ]; then
		PARAMS=$(echo $@ | sed 's/icmp/icmpv6/g')

		ip6tables -t mangle $PARAMS
	fi
}

ipt () {
	_ipt -A jdg-qos $@
}

ipt_stop () {
	sysctl -w net.netfilter.nf_conntrack_acct=0 > /dev/null

	_ipt -D PREROUTING -j jdg-qos 2> /dev/null || true
	_ipt -F jdg-qos               2> /dev/null || true
	_ipt -X jdg-qos               2> /dev/null || true
}

ipt_init () {
	_ipt -N jdg-qos
}

ipt_start () {
	sysctl -w net.netfilter.nf_conntrack_acct=1 > /dev/null

	_ipt -A PREROUTING -j jdg-qos
}

ipt_rules () {
	# DNS
	ipt -p udp -m multiport --ports domain -j DSCP --set-dscp-class AF31
	ipt -p tcp -m multiport --ports domain -j DSCP --set-dscp-class AF31

	# HTTP(S)
	ipt -p tcp -m multiport --ports www,https \
		-j DSCP --set-dscp-class AF12
	ipt -p tcp -m multiport --ports www,https \
		-m connbytes --connbytes 0:$((512*1024)) \
			--connbytes-dir both --connbytes-mode bytes \
		-j DSCP --set-dscp-class AF22

	# SSH an Telnet
	ipt -p tcp -m multiport --ports ssh,telnet \
		-j DSCP --set-dscp-class AF32
	ipt -p tcp -m multiport --ports ssh \
		-m tos --tos Maximize-Throughput \
		-j DSCP --set-dscp-class AF22

	# ICMP
	ipt -p icmp                          -j DSCP --set-dscp-class AF41
	ipt -p icmp --icmp-type echo-request -j DSCP --set-dscp-class AF42
	ipt -p icmp --icmp-type echo-reply   -j DSCP --set-dscp-class AF42

	# TCP
	ipt -p tcp ! --tcp-flags SYN,FIN,RST     NONE \
		-j DSCP --set-dscp-class AF41
	ipt -p tcp   --tcp-flags SYN,ACK,FIN,RST ACK \
		-m length --length 32:40 \
		-j DSCP --set-dscp-class AF42
}

qos_stop () {
	tc qdisc del dev $IFACE	root	2> /dev/null || true
	tc qdisc del dev $IFACE	ingress	2> /dev/null || true

	tc qdisc del dev ifb0	root	2> /dev/null || true
	ip link set ifb0 down		2> /dev/null || true

	modprobe -r ifb			2> /dev/null || true
}

qos_rules () {
	local STAB

	[ $OVERHEAD -ne 0 ] && STAB="stab linklayer atm overhead $OVERHEAD mtu $MTU"

	# egress
	tc qdisc add dev $IFACE       root        handle    1: dsmark \
		indices 64 set_tc_index
	tc qdisc add dev $IFACE $STAB parent  1:1 handle   10: prio \
		bands 3 priomap 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
	tc qdisc add dev $IFACE       parent 10:1 handle  100: tbf \
		rate ${UEF}kbit burst $((2*$MTU)) latency 50ms
	tc qdisc add dev $IFACE       parent 10:2 handle  200: gred \
		setup DPs 12 default 11 grio
	MAX=$((($URATE*1000)/(8*10)))
	MIN=$(($MAX/2))
	LIMIT=$((8*$MAX))
	BURST=$(((2*$MIN+$MAX)/(3*1000)))
	tc qdisc add dev $IFACE       parent 10:3 handle  300: red \
		limit $LIMIT min $MIN max $MAX avpkt 1000 burst $BURST \
		probability 0.04 ecn

	modprobe ifb numifbs=1
	ip link set ifb0 up

	# ingress
	tc qdisc add dev $IFACE       ingress     handle ffff:
	tc qdisc add dev ifb0         root        handle    1: dsmark \
		indices 64 set_tc_index
	tc qdisc add dev ifb0   $STAB parent  1:1 handle   10: prio \
		bands 3 priomap 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
	tc qdisc add dev ifb0         parent 10:1 handle  100: tbf \
		rate ${DEF}kbit burst $((2*$MTU)) latency 50ms
	tc qdisc add dev ifb0         parent 10:2 handle  200: gred \
		setup DPs 12 default 11 grio
	MAX=$((($DRATE*1000)/(8*10)))
	MIN=$(($MAX/2))
	LIMIT=$((8*$MAX))
	BURST=$(((2*$MIN+$MAX)/(3*1000)))
	tc qdisc add dev ifb0         parent 10:3 handle  300: red \
		limit $LIMIT min $MIN max $MAX avpkt 1000 burst $BURST \
		probability 0.04 ecn

	for ELEMENT in $TABLE; do
		E=$(echo $ELEMENT | cut -d: -f 1); E=${E#AF}
		C=${E%?}; D=${E#?}; I=$((12-3*$C+$D))

		S=$(echo $ELEMENT | cut -d: -f 2 | sed 's/^0\+//')
		L=$(($(echo $ELEMENT | cut -d: -f 3 | sed 's/^0\+//')+$LAT))
		A=$(echo $ELEMENT | cut -d: -f 4 | sed 's/^0\+//')
			[ -z "$A" ] && A=$MTU
		P=$(echo $ELEMENT | cut -d: -f 5 | sed 's/^0\+//')

		MAX=$((($S*$L*$URATE)/(8*10)))
		MIN=$(($MAX/2))
		LIMIT=$((4*$MAX))
		BURST=$(((2*$MIN+$MAX)/(3*$A)))

		tc qdisc  change dev $IFACE parent 10:2 gred DP $(($I-1)) \
			limit $LIMIT min $MIN max $MAX avpkt $A burst $BURST \
			probability $P bandwidth ${URATE}kbit prio $(($I+7))

		MAX=$((($S*$L*$DRATE)/(8*10)))
		MIN=$(($MAX/2))
		LIMIT=$((4*$MAX))
		BURST=$(((2*$MIN+$MAX)/(3*$A)))

		tc qdisc  change dev ifb0   parent 10:2 gred DP $(($I-1)) \
			limit $LIMIT min $MIN max $MAX avpkt $A burst $BURST \
			probability $P bandwidth ${DRATE}kbit prio $(($I+7))
	done

	tc filter add dev $IFACE parent ffff: protocol all \
		basic action mirred egress redirect dev ifb0

	tc filter add dev $IFACE parent    1: protocol all \
		tcindex mask 0xfc shift 2
	tc filter add dev $IFACE parent   10: protocol all \
		handle 0x2e tcindex classid 10:1
	tc filter add dev $IFACE parent   10: protocol all \
		handle 0x00 tcindex classid 10:3

	tc filter add dev ifb0   parent    1: protocol all \
		tcindex mask 0xfc shift 2
	tc filter add dev ifb0   parent   10: protocol all \
		handle 0x2e tcindex classid 10:1
	tc filter add dev ifb0   parent   10: protocol all \
		handle 0x00 tcindex classid 10:3
}

qos_stop
ipt_stop
[ "x$1" = "xstop" ] && exit 0
ipt_init
ipt_rules
qos_rules
ipt_start

exit 0
